#!/usr/bin/env ruby

require 'rubygems'
require 'servitude'
require 'socket'
require 'pry'

# The echo server accepts a message and repeats it back.  It is the first real server in the examples.
#
# Note: Due to TcpServer#accept's implementation, the server is not currently gracefully shutting down as the trap of INT
# appears to never happen.
#
# Usage:
#   bundle exec examples/2_echo_server
#
#   Then use telent to exercise the server:
#   $ telnet localhost 1234
#   Hello World!
#   You said: Hello World!
#   Connection closed by foreign host.
#
module EchoServer

  include Servitude::Base

  APP_FOLDER = 'echo-server'
  VERSION    = '1.0.0'

  PROJECT_ROOT = File.expand_path( '../..', __FILE__ )
  
  boot host_namespace: EchoServer,
       app_id: 'echo-server',
       app_name: 'Echo Server',
       company: 'LFE',
       default_config_path: "#{PROJECT_ROOT}}/config/#{APP_FOLDER}.conf",
       default_log_path: "#{PROJECT_ROOT}/tmp/#{APP_FOLDER}.log",
       default_pid_path: "#{PROJECT_ROOT}/tmp/#{APP_FOLDER}.pid",
       default_thread_count: 1,
       version_copyright: "v#{VERSION} \u00A9#{Time.now.year} LFE"

  class Server

    include Servitude::Server

    after_initialize do
      @tcp_server = TCPServer.open( 'localhost', '1234' )
    end

    finalize do
      binding.pry
      info 'Shutting down ...'
    end

    def run
      while client = tcp_server.accept
        line = client.gets
        info "Received '#{line.strip}'"
        response = "You said: #{line.strip}"
        client.puts response 
        info "Responded with '#{response}'"
        info "Closing connection"
        client.close
      end
    end

  private

    attr_reader :tcp_server

  end
end

EchoServer::Server.new.start
